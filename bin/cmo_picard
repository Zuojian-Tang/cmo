#!/opt/common/CentOS_6-dev/python/python-2.7.10/bin/python

import argparse, os, sys, re, subprocess,itertools
import cmo

def find_sub_command_options(picard_helper, sub_command):
    cmd = picard_helper.picard_cmd_help(sub_command) 
    picard_help = subprocess.Popen(cmd,stderr=subprocess.PIPE,shell=True).communicate()[1]
    #look for "is not a valid command, and return the picard help instead of a parsed dict of args
    if re.search("is not a valid command", picard_help):
        return (None, picard_help)
    #look for 1 or 2 occurrences of WORD_THINGY=THINGY and the following help and return them as a dictified
    #list of tuples
    valid_args = re.findall(r"(?:^([\S_]+)=\S+\n?){1,2}\s+([\S\s]+?(?=^[\S_]+=\S+))", picard_help, re.M)
    return (dict(valid_args), None)

if __name__ =='__main__':
    #partially parse options to get versin/subcommand and add more options
    preparser = argparse.ArgumentParser(description="run picard", add_help=False)
    preparser.add_argument("--version", choices=cmo.util.programs['picard'].keys(), default="default")
    preparser.add_argument("--java-version", choices=cmo.util.programs['java'].keys(), default="default")
    preparser.add_argument("--cmd", required=True)
    options, _ = preparser.parse_known_args()
    #time for monkey business
    picard_helper = cmo.picard.Picard(java_version=options.version, version=options.version)
    (sub_command_options, error_msg) = find_sub_command_options(picard_helper, options.cmd)
    if sub_command_options == None:
        print >>sys.stderr, error_msg
        sys.exit(1)
    #ok it was a valid subcommand, add the options we found and the genome option
    parser = argparse.ArgumentParser(parents= [ preparser ] , add_help= True,
            formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    for arg, help in sub_command_options.items():
        help = help.replace("%","%%")
        if re.search("Required.", help) != None:
            required=True
        else:
            required=False
        parser.add_argument("--"+arg, action="store", help=help, required=required) 
    parser.add_argument("--genome", required=True, choices=cmo.util.genomes.keys())
    args = parser.parse_args()
    command_specific_args = vars(args)
    genome = args.genome
    for key in  ["version", "java_version", "sub_command", "genome"]:
        del command_specific_args[key]
    #default_args is handled a little crappily, but not a big deal for now
    default_args_override = { "REFERENCE_SEQUENCE": cmo.util.genomes[genome]['fasta'] }
    print picard_helper.picard_cmd(options.cmd, default_args_override=default_args_override, command_specific_args=command_specific_args)
     
