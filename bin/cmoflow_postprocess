#!/opt/common/CentOS_6-dev/python/python-2.7.10/bin/python
from cmo import workflow
import argparse, os, sys
import cmo 

def main(pairing_file, pipeline_output_dir, project_id, output_dir):
    pipeline_output_dir = os.path.abspath(pipeline_output_dir)
    haplotype_vcf_pattern = os.path.join(pipeline_output_dir, "variants",  "haplotype_caller", "*_HaplotypeCaller.vcf")
    if not project_id:
        m = re.match("(Proj_\d+(?:_\s)?", pipeline_output_dir)
        if not m:
            print >>sys.stderr, "Unable to find a PROJ_[NUMBER]_[A-Z] string in pipeline dir name"
            print >>sys.stderr, "Supply a PROJECT ID at command line to run with this dir."
            print >>sys.stderr, "Bailing out!"
            sys.exit(1)
    project_id = m.group(1)
    try:
        haplotype_vcf = glob.glob(haplotype_vcf_pattern)[0]
    except:
        print >>sys.stderr, "No Haplotype VCF found with %s glob pattern" % haplotype_vcf_pattern
    hapmaf_filename = project_id + "___qSomHC_InDels__TCGA_MAF.txt"
    output_file = os.path.join(output_dir, hapmaf_filename)
    #FIXME TEMP DIRECTORY?!?!?!?
    haplo_cmd = ["cmo_filter_haplotype", "--pairing-file", pairing_file, "--haplotype-vcf", haplotype_vcf, 
            "--output-file", hapmaf_filename]
    mutect_dir = os.path.join(pipeline_output_dir, "variants", "mutect", "")
    mutect_vcfs = glob.glob(os.path.join(mutect_dir, "*.vcf"))
    mutect_cmds = list()
    maf_outputs = [hapmaf_filename]
    for vcf in mutect_vcfs:
        output_file = os.path.basename(vcf.replace(".vcf", ".DMP_FILTER.maf"))
        output_file = os.path.join(output_dir, output_file)
        maf_outputs.append(output_file)
        #FIXME TEMP DIR!?!?!?!?!?
        cmd = ["cmo_filter_mutect", "--pairing-file", pairing_file, "--mutect-vcf", os.path.abspath(vcf), 
                "--output-file", output_file]
        mutect_cmds.append(cmd)
    merged_maf_name = os.path.join(output_dir, "merge_maf3")
    merge_mafs_cmd = ["cmo_merge_mafs", " ".join(maf_outputs), "--output-file", merged_maf_name]
    merged_seq = os.path.join(output_dir, "merged_maf3.seq")
    merged_impact_pos = os.path.join(output_dir, "merged_maf3.impact410")
    trinuc_cmd = ["cmo_trinuc_and_impact" , "--source-file", merged_maf_name, "--genome", "hg19", 
            "--output-seq", merged_seq, "--output-impact", merged_impact_pos]

    



    

    #FIXME construct indels only MAFlike output from Haplotyper caller
    #if [ ! -f "$TDIR/$HAPMAF" ]; then
    #$SDIR/vcf2maf0.py -c haplotypecaller -p $PAIRING -i $HAPLOTYPEVCF \
    #    -o $TDIR/hap_maf0
    #$SDIR/pA_qSomHC.py <$TDIR/hap_maf0 >$TDIR/hap_maf1
    #$SDIR/oldMAF2tcgaMAF.py hg19 $TDIR/hap_maf1 $TDIR/hap_maf2
    #$SDIR/indelOnly.py <$TDIR/hap_maf2 >$TDIR/hap_maf2b
    #$SDIR/normalizeInDels.py $TDIR/hap_maf2b $TDIR/$HAPMAF
    #fi
    #ONE JOB TODO


    #FIXME filter MANY mutect outputs
    #   MUTECTDIR=$PIPEOUT/variants/mutect
    #echo $0 $MUTECTDIR
    #
    #if [ ! -f "$TDIR/merge_maf3" ]; then
    #    for vcf in $MUTECTDIR/*vcf; do
    #        BASE=$(basename $vcf | sed 's/.vcf//')
    #        normal=$(echo $vcf | perl -ne '/_(s_.*?)_(s_.*?)_mutect/; print "$1"')
    #        tumor=$(echo $vcf | perl -ne '/_(s_.*?)_(s_.*?)_mutect/; print "$2"')
    #        echo $vcf, $normal, $tumor
    #        $SDIR/vcf2maf0.py -c mutect -p $PAIRING \
    #            -t $tumor -n $normal -i $vcf \
    #            -o $TDIR/mt_maf0
    #        $SDIR/DMP_rescue.py  <$TDIR/mt_maf0 >$TDIR/mt_maf1
    #        $SDIR/oldMAF2tcgaMAF.py hg19 $TDIR/mt_maf1 $TDIR/mt_maf2
    #        awk -F"\t" '$40=="FILTER"||$40=="PASS"{print $0}' $TDIR/mt_maf2 \
    #            >$TDIR/${BASE}___DMPFilter_TCGA_MAF.txt
    #    done
    #
    #    echo
    #    echo $0 "Done with mutect rescue"
    #    echo
    #
    #
    #    #
    #    # merge_maf3 is a TCGA MAF
    #    #
    #
    #    cat $TDIR/$HAPMAF | cut -f-39 >$TDIR/merge_maf3
    #    cat $TDIR/*___DMPFilter_TCGA_MAF.txt | egrep -v "^Hugo_Symbol" | cut -f-39 >>$TDIR/merge_maf3
    #MANY JOBS TODO 

    #REST OF PIPELINE FIXME
    #if [ ! -f "$TDIR/merge_maf3.vep" ]; then
    #mkdir -p $TDIR/SOM
    #$PERL $VCF2MAF/maf2maf.pl \
    #    --vep-forks 12 \
    #    --tmp-dir $TDIR/SOM \
    #    --vep-path $VEPPATH \
    #	--vep-data $VEPPATH \
    #	--ref-fasta $TDIR/$(basename $GENOME) \
    #	--retain-cols Center,Verification_Status,Validation_Status,Mutation_Status,Sequencing_Phase,Sequence_Source,Validation_Method,Score,BAM_file,Sequencer,Tumor_Sample_UUID,Matched_Norm_Sample_UUID,Caller \
    #    --custom-enst $MSK_ISOFORMS \
    #	--input-maf $TDIR/merge_maf3 \
    #	--output-maf $TDIR/merge_maf3.vep
    #
    #
    #$SDIR/maf2vcfSimple.sh $TDIR/merge_maf3 >$TDIR/merge_maf3.vcf
    #cat $TDIR/merge_maf3.vcf | sed 's/^chr//' > $TDIR/maf3.vcf
    #$SDIR/bgzip $TDIR/maf3.vcf
    #$SDIR/tabix -p vcf $TDIR/maf3.vcf.gz
    #/opt/common/CentOS_6/bcftools/bcftools-1.2/bin/bcftools \
    #    annotate --annotations $EXACDB \
    #    --columns AC,AN,AF --output-type v --output $TDIR/maf3.exac.vcf $TDIR/maf3.vcf.gz
    #
    #$SDIR/fillOutMAF_CBE.sh \
    #    $PIPEOUT/alignments $TDIR/merge_maf3.vcf $TDIR/fillOut.out &
    #FILLOUT_CPID=$!
    #fi
    #
    #cat $TDIR/merge_maf3.vep \
    #    | egrep -v "(^#|^Hugo_Symbol)" \
    #    | awk '{print $5,$6-1,$7}' \
    #    | tr ' ' '\t'  >$TDIR/merge_maf3.bed
    #
    #$BEDTOOLS slop -g ~/lib/bedtools/genomes/human.hg19.genome -b 1 -i $TDIR/merge_maf3.bed \
    #    | $BEDTOOLS getfasta -tab \
    #    -fi $GENOME -fo $TDIR/merge_maf3.seq -bed -
    #
    #$BEDTOOLS intersect -a $TDIR/merge_maf3.bed \
    #    -b $SDIR/db/IMPACT_410_hg19_targets_plus3bp.bed -wa \
    #    | $BEDTOOLS sort -i - | awk '{print $1":"$2+1"-"$3}' | uniq >$TDIR/merge_maf3.impact410
    #
    #$SDIR/mkTaylorMAF.py $TDIR/merge_maf3.seq $TDIR/merge_maf3.impact410 $TDIR/maf3.exac.vcf $TDIR/merge_maf3.vep \
    #    > ${PROJECT}___SOMATIC.vep.maf
    #
    ##echo $0 "Waiting for GERMLINE "$GERMLINE_CPID
    ##wait $GERMLINE_CPID
    ##echo $0 "DONE"
    #echo $0 "Waiting for FILL "$FILLOUT_CPID
    #wait $FILLOUT_CPID
    #echo $0 "DONE"
    #
    #python2.7 $SDIR/zeng2MAFFill $TDIR/merge_maf3.vep $TDIR/fillOut.out >${PROJECT}___FILLOUT.vep.maf
    #
       

if __name__=='__main__':
    parser = argparse.ArgumentParser(description="Run Facets on luna!", epilog="Include any FACETS args directly on this command line and they will be passed through")
    parser.add_argument("--pairing-file", required=True, help="The pairing filee")
    parser.add_argument("--pipeline-output-dir", required=True, help="The pipeline output directory")
    parser.add_argument("--project-id", help="Optionally override project ID dir name searching...")

    args = parser.parse_args()
    main(args.pairing_file, args.pipeline_output_dir, args.project_id)

  
         


