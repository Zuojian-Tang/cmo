#!/opt/common/CentOS_6-dev/python/python-2.7.10/bin/python
from cmo import workflow
import argparse, os, sys
import cmo, shutil 
from distutils.version import StrictVersion

def run_sleuth(samplefile):
    samplefile = os.path.abspath(samplefile)
    sleuth_cmd = ["cat", samplefile]
    return workflow.Job(" ".join(sleuth_cmd), 
                        resources="rusage[mem=1]",
                        name="Run Sleuth")

def QoRT_merge_all_junctions(inputdir, samplenames, outputdir, minCount = 6):
    inputdir = os.path.abspath(inputdir)

    ### samplenames must be directories in the inputdir
    for s in samplenames:
        if not os.path.exists(inputdir + "/" + s):
            exit("samplenames must be directories in the inputdir")

    ### inputdirs = [os.path.abspath(d) for d in inputdirs]
    ### inputdirs_base = [os.path.basename(d) for d in inputdirs]

    outputdir = os.path.abspath(outputdir)
    if not os.path.exists(outputdir): os.makedirs(outputdir)

    ### list input directories in file for JunctionSeq
    decoder_filename = outputdir + "/decoder.txt"
    decoder = open(decoder_filename, 'w')
    decoder.write("sample.ID\n")
    for d in samplenames: decoder.write(d + "\n")
    decoder.close()

    merge_all_cmd = [cmo.util.programs['java']["default"], 
                     "-jar", cmo.util.programs['QoRT']["default"], 
                     "mergeNovelSplices",
                     "--minCount", str(minCount),
                     inputdir,                
                     decoder_filename,
                     cmo.util.genomes[args.reference_sequence]['default']['gtf'],
                     outputdir]
    return workflow.Job(" ".join(merge_all_cmd), 
                        resources="rusage[mem=15]",
                        name="Merge all QoRT junction and exon counts")

def QoRT_merge_excl_novel_junctions(inputdir):
    # java -jar /path/to/jarfile/QoRTs.jar makeFlatGff \
    #                --stranded \
    #                annoFiles/anno.gtf.gz \
    #                annoFiles/JunctionSeq.flat.gff.gz
    pass

def run_JuntionSeq(inputdir):
    JuntionSeq_cmd = [programs["R"]["3.2.2-dev"] + "Rscript",
                      "-e", "rnaseq.scripts::JunctionSeq()",
                      "-d", inputdir,
                      "--gene.names", genomes[args.reference_sequence]['default']['gene_names']
                      ]
    return workflow.Job(" ".join(JunctionSeq_cmd),
                        resources="rusage[mem=15]",
                        name="Run JunctionSeq")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Run RNASeq on luna!")
    parser.add_argument("-R", "--reference_sequence", required=True, 
                        choices=cmo.util.genomes.keys(),
                        help="name of reference")
    parser.add_argument("-s", "--samplefile", required=True,
                        help="text file listing samples and condition")
    parser.add_argument("-o", "--outputdir", default = ".",
                        help="output directory, will default to '.'")
    # parser.add_argument("-i", "--inputdir", default = ".",
    #                     help="input directory, will default to '.'")
    parser.add_argument("-c", "--minCounts", default = "6",
                        help="minCounts for JunctionSeq")
    # parser.add_argument("-s", '--samplenames', nargs='+', required=True,
    #                     help='directories within inputdir containing cmoflow_rnaseq output')
    args = parser.parse_args()
    print(args)

    sleuth = run_sleuth(args.samplefile)
    jobs_list = [sleuth]
#    QoRT_merge = QoRT_merge_all_junctions(args.inputdir, args.samplenames, args.outputdir)
#    jobs_list = [sleuth, QoRT_merge]
    jobs_dict = {}

    new_workflow = workflow.Workflow(jobs_list, jobs_dict, name="RNASeq Project Workflow")
    new_workflow.run('LSF')
            
