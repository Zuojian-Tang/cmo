#!/opt/common/CentOS_6-dev/python/python-2.7.10/bin/python
from cmo import workflow
import argparse, os, sys
import cmo, shutil 
from distutils.version import StrictVersion

def concatenate_fastqs(fastq_filenames, output_filename):
    fastq_filenames = [os.path.abspath(file) for file in fastq_filenames]
    output_filename = os.path.abspath(output_filename)
    if(output_filename in fastq_filenames): 
        fastq_filenames.remove(output_filename)

    fastq_str = " ".join(fastq_filenames)
    cat_cmd = ["/bin/zcat", fastq_str, "| /bin/gzip -c >", output_filename]
    return workflow.Job(" ".join(cat_cmd), name="Concatenate fastqs")

def run_kallisto(fastq_filenames, outputdir, 
                 processors = 10, bootstraps = 40):
    fastq_filenames = [os.path.abspath(file) for file in fastq_filenames]
    outputdir = os.path.abspath(outputdir)

    kallisto_cmd = [cmo.util.programs['kallisto']["default"], "quant",
                    "-i", cmo.util.genomes[args.reference_sequence]['kallisto_index'],
                    "-o", outputdir,
                    "--bias",
                    "-b", str(bootstraps),
                    "-t", str(processors)] + fastq_filenames
    return workflow.Job(" ".join(kallisto_cmd),
                        resources="rusage[mem=10]",
                        name="Run kallisto",
                        processors = processors)

def star_alignment(input_R1, input_R2, outputdir, processors = 10):
    input_R1 = os.path.abspath(input_R1)
    input_R2 = os.path.abspath(input_R2)
    outFileNamePrefix = os.path.abspath(outputdir) + "/"

    star_cmd = [cmo.util.programs['star']["default"],
                "--readFilesCommand zcat",
                "--genomeDir", cmo.util.genomes[args.reference_sequence]['star_index'],
                "--readFilesIn", input_R1, input_R2,
                "--outFileNamePrefix", outFileNamePrefix,
                "--runThreadN", str(processors),
                "--outSAMtype BAM SortedByCoordinate",
                "&&",
                cmo.util.programs['samtools']["1.3.1"], "index",
                outFileNamePrefix + "Aligned.sortedByCoord.out.bam",
                "&&",
                "rm -rf",
                outFileNamePrefix + "_STARtmp"]
    return workflow.Job(" ".join(star_cmd), 
                        resources="rusage[mem=40]", 
                        name="Run STAR alignment",
                        processors = processors)

def run_QoRT(bam_file, outputdir):
    """'Quality of RNA' metrics and counts"""

    bam_file = os.path.abspath(bam_file)
    outputdir = os.path.abspath(outputdir)

    QoRT_cmd = [cmo.util.programs['java']["default"], 
                "-jar", cmo.util.programs['QoRT']["default"], 
                "QC",
                bam_file,
                cmo.util.genomes[args.reference_sequence]['gencode']['default'],
                outputdir]
    return workflow.Job(" ".join(QoRT_cmd), 
                        resources="rusage[mem=30]", 
                        name="Run QoRT")

def QoRT_merge_all_junctions(inputdir, samplenames, outputdir, minCount = 6):
    inputdir = os.path.abspath(inputdir)

    ### samplenames must be directories in the inputdir
    for s in samplenames:
        if not os.path.exists(inputdir + "/" + s):
            exit("samplenames must be directories in the inputdir")

    ### inputdirs = [os.path.abspath(d) for d in inputdirs]
    ### inputdirs_base = [os.path.basename(d) for d in inputdirs]

    outputdir = os.path.abspath(outputdir)
    if not os.path.exists(outputdir): os.makedirs(outputdir)

    ### list input directories in file for JunctionSeq
    decoder_filename = outputdir + "/decoder.txt"
    decoder = open(decoder_filename, 'w')
    decoder.write("sample.ID\n")
    for d in samplenames: decoder.write(d + "\n")
    decoder.close()

    merge_all_cmd = [cmo.util.programs['java']["default"], 
                     "-jar", cmo.util.programs['QoRT']["default"], 
                     "mergeNovelSplices",
                     "--minCount", str(minCount),
                     inputdir,                
                     decoder_filename,
                     cmo.util.genomes[args.reference_sequence]['gencode']['default'],
                     outputdir]
    return workflow.Job(" ".join(merge_all_cmd), 
                        resources="rusage[mem=15]",
                        name="Merge all QoRT junction and exon counts")

def QoRT_merge_excl_novel_junctions(inputdir):
    # java -jar /path/to/jarfile/QoRTs.jar makeFlatGff \
    #                --stranded \
    #                annoFiles/anno.gtf.gz \
    #                annoFiles/JunctionSeq.flat.gff.gz
    pass

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Run RNASeq on luna!")
    parser.add_argument("-R", "--reference_sequence", required=True, 
                        choices=cmo.util.genomes.keys(),
                        help="name of reference")
    parser.add_argument("-o", "--outputdir", default = ".",
                        help="output directory, will default to '.'")
    parser.add_argument("-i", "--inputdir", default = ".",
                        help="input directory, will default to '.'")
    parser.add_argument("-c", "--minCounts", default = "6",
                        help="minCounts for JunctionSeq")
    parser.add_argument("-s", '--samplenames', nargs='+', required=True,
                        help='directories within inputdir containing cmoflow_rnaseq output')
    args = parser.parse_args()
    print(args)

    QoRT_merge = QoRT_merge_all_junctions(args.inputdir, args.samplenames, args.outputdir)
    jobs_list = [QoRT_merge]
    jobs_dict = {}

    new_workflow = workflow.Workflow(jobs_list, jobs_dict, name="RNASeq Project Workflow")
    new_workflow.run('LSF')
            
