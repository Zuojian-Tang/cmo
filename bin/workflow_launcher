#!/usr/bin/python
import sys, inspect
import cmo
import argparse
from cmo import workflow
import cmo.workflows

#tell me all the modules underneath cmo/workflows/
modules = inspect.getmembers(sys.modules["cmo.workflows"], inspect.ismodule)
workflows = dict()
for module in modules:
    #tell me all the classes defined in those modules
    classes = inspect.getmembers(sys.modules["cmo.workflows." + module[0]], inspect.isclass)
    for possible_workflow in classes:
        #subtract the classes that are loaded but are not actually from the cmo.workflows namespace
        if possible_workflow[1].__module__.find("cmo.workflows")>-1:
            workflows[possible_workflow[0]]=possible_workflow[1]

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="run a workflow", add_help=False)
    #all the workflows in the cmo package now appear as choices
    parser.add_argument("-w", "--workflow", choices=workflows.keys())
    parser.add_argument("-m", "--workflow-mode", choices=["Static", "LSF"], default="LSF")
    (args, _) = parser.parse_known_args()
    #they didn't choose a workflow, bail out
    if not args.workflow:
       sys.exit(1)
    else:
       workflow_object = workflows[args.workflow]()

       #all workflow objects have the parse_workflow_args methods 
       parser = workflow_object.parse_workflow_args(parent=parser)
       (args, unknown_args)= parser.parse_known_args()
       args = vars(args)
       #clean up some args we use only for this launcher before passing the rest of the args through
       workflow_mode = args['workflow_mode']
       try:
           del args['workflow_mode']
           del args['workflow']
       except:
           pass
       #all workflows have this construct_workflow call
       #all return dicts minimally have "jobs", "dependencies", and "name" but can also throw any other bits of data they need to send back for proper workflow chaining
       print args, unknown_args
       workflow_dict = workflow_object.construct_workflow(args, unknown_args)
    facets_workflow = workflow.Workflow(workflow_dict['jobs'], workflow_dict['dependencies'], name=workflow_dict['workflow_name'])
    facets_workflow.run(workflow_mode)
 





    

